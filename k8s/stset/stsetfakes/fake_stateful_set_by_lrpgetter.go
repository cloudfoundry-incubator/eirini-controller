// Code generated by counterfeiter. DO NOT EDIT.
package stsetfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini-controller/k8s/stset"
	v1a "code.cloudfoundry.org/eirini-controller/pkg/apis/eirini/v1"
	v1 "k8s.io/api/apps/v1"
)

type FakeStatefulSetByLRPGetter struct {
	GetByLRPStub        func(context.Context, *v1a.LRP) ([]v1.StatefulSet, error)
	getByLRPMutex       sync.RWMutex
	getByLRPArgsForCall []struct {
		arg1 context.Context
		arg2 *v1a.LRP
	}
	getByLRPReturns struct {
		result1 []v1.StatefulSet
		result2 error
	}
	getByLRPReturnsOnCall map[int]struct {
		result1 []v1.StatefulSet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRP(arg1 context.Context, arg2 *v1a.LRP) ([]v1.StatefulSet, error) {
	fake.getByLRPMutex.Lock()
	ret, specificReturn := fake.getByLRPReturnsOnCall[len(fake.getByLRPArgsForCall)]
	fake.getByLRPArgsForCall = append(fake.getByLRPArgsForCall, struct {
		arg1 context.Context
		arg2 *v1a.LRP
	}{arg1, arg2})
	stub := fake.GetByLRPStub
	fakeReturns := fake.getByLRPReturns
	fake.recordInvocation("GetByLRP", []interface{}{arg1, arg2})
	fake.getByLRPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRPCallCount() int {
	fake.getByLRPMutex.RLock()
	defer fake.getByLRPMutex.RUnlock()
	return len(fake.getByLRPArgsForCall)
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRPCalls(stub func(context.Context, *v1a.LRP) ([]v1.StatefulSet, error)) {
	fake.getByLRPMutex.Lock()
	defer fake.getByLRPMutex.Unlock()
	fake.GetByLRPStub = stub
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRPArgsForCall(i int) (context.Context, *v1a.LRP) {
	fake.getByLRPMutex.RLock()
	defer fake.getByLRPMutex.RUnlock()
	argsForCall := fake.getByLRPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRPReturns(result1 []v1.StatefulSet, result2 error) {
	fake.getByLRPMutex.Lock()
	defer fake.getByLRPMutex.Unlock()
	fake.GetByLRPStub = nil
	fake.getByLRPReturns = struct {
		result1 []v1.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *FakeStatefulSetByLRPGetter) GetByLRPReturnsOnCall(i int, result1 []v1.StatefulSet, result2 error) {
	fake.getByLRPMutex.Lock()
	defer fake.getByLRPMutex.Unlock()
	fake.GetByLRPStub = nil
	if fake.getByLRPReturnsOnCall == nil {
		fake.getByLRPReturnsOnCall = make(map[int]struct {
			result1 []v1.StatefulSet
			result2 error
		})
	}
	fake.getByLRPReturnsOnCall[i] = struct {
		result1 []v1.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *FakeStatefulSetByLRPGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByLRPMutex.RLock()
	defer fake.getByLRPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStatefulSetByLRPGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stset.StatefulSetByLRPGetter = new(FakeStatefulSetByLRPGetter)
