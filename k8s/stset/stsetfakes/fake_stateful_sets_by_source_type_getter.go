// Code generated by counterfeiter. DO NOT EDIT.
package stsetfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini-controller/k8s/stset"
	v1 "k8s.io/api/apps/v1"
)

type FakeStatefulSetsBySourceTypeGetter struct {
	GetBySourceTypeStub        func(context.Context, string) ([]v1.StatefulSet, error)
	getBySourceTypeMutex       sync.RWMutex
	getBySourceTypeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getBySourceTypeReturns struct {
		result1 []v1.StatefulSet
		result2 error
	}
	getBySourceTypeReturnsOnCall map[int]struct {
		result1 []v1.StatefulSet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceType(arg1 context.Context, arg2 string) ([]v1.StatefulSet, error) {
	fake.getBySourceTypeMutex.Lock()
	ret, specificReturn := fake.getBySourceTypeReturnsOnCall[len(fake.getBySourceTypeArgsForCall)]
	fake.getBySourceTypeArgsForCall = append(fake.getBySourceTypeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetBySourceTypeStub
	fakeReturns := fake.getBySourceTypeReturns
	fake.recordInvocation("GetBySourceType", []interface{}{arg1, arg2})
	fake.getBySourceTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceTypeCallCount() int {
	fake.getBySourceTypeMutex.RLock()
	defer fake.getBySourceTypeMutex.RUnlock()
	return len(fake.getBySourceTypeArgsForCall)
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceTypeCalls(stub func(context.Context, string) ([]v1.StatefulSet, error)) {
	fake.getBySourceTypeMutex.Lock()
	defer fake.getBySourceTypeMutex.Unlock()
	fake.GetBySourceTypeStub = stub
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceTypeArgsForCall(i int) (context.Context, string) {
	fake.getBySourceTypeMutex.RLock()
	defer fake.getBySourceTypeMutex.RUnlock()
	argsForCall := fake.getBySourceTypeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceTypeReturns(result1 []v1.StatefulSet, result2 error) {
	fake.getBySourceTypeMutex.Lock()
	defer fake.getBySourceTypeMutex.Unlock()
	fake.GetBySourceTypeStub = nil
	fake.getBySourceTypeReturns = struct {
		result1 []v1.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *FakeStatefulSetsBySourceTypeGetter) GetBySourceTypeReturnsOnCall(i int, result1 []v1.StatefulSet, result2 error) {
	fake.getBySourceTypeMutex.Lock()
	defer fake.getBySourceTypeMutex.Unlock()
	fake.GetBySourceTypeStub = nil
	if fake.getBySourceTypeReturnsOnCall == nil {
		fake.getBySourceTypeReturnsOnCall = make(map[int]struct {
			result1 []v1.StatefulSet
			result2 error
		})
	}
	fake.getBySourceTypeReturnsOnCall[i] = struct {
		result1 []v1.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *FakeStatefulSetsBySourceTypeGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBySourceTypeMutex.RLock()
	defer fake.getBySourceTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStatefulSetsBySourceTypeGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stset.StatefulSetsBySourceTypeGetter = new(FakeStatefulSetsBySourceTypeGetter)
