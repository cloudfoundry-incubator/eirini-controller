// Code generated by counterfeiter. DO NOT EDIT.
package taskfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini-controller/k8s/informers/task"
	v1 "k8s.io/api/batch/v1"
)

type FakeJobsClient struct {
	GetByGUIDStub        func(context.Context, string, bool) ([]v1.Job, error)
	getByGUIDMutex       sync.RWMutex
	getByGUIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 bool
	}
	getByGUIDReturns struct {
		result1 []v1.Job
		result2 error
	}
	getByGUIDReturnsOnCall map[int]struct {
		result1 []v1.Job
		result2 error
	}
	SetLabelStub        func(context.Context, *v1.Job, string, string) (*v1.Job, error)
	setLabelMutex       sync.RWMutex
	setLabelArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.Job
		arg3 string
		arg4 string
	}
	setLabelReturns struct {
		result1 *v1.Job
		result2 error
	}
	setLabelReturnsOnCall map[int]struct {
		result1 *v1.Job
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobsClient) GetByGUID(arg1 context.Context, arg2 string, arg3 bool) ([]v1.Job, error) {
	fake.getByGUIDMutex.Lock()
	ret, specificReturn := fake.getByGUIDReturnsOnCall[len(fake.getByGUIDArgsForCall)]
	fake.getByGUIDArgsForCall = append(fake.getByGUIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.GetByGUIDStub
	fakeReturns := fake.getByGUIDReturns
	fake.recordInvocation("GetByGUID", []interface{}{arg1, arg2, arg3})
	fake.getByGUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJobsClient) GetByGUIDCallCount() int {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	return len(fake.getByGUIDArgsForCall)
}

func (fake *FakeJobsClient) GetByGUIDCalls(stub func(context.Context, string, bool) ([]v1.Job, error)) {
	fake.getByGUIDMutex.Lock()
	defer fake.getByGUIDMutex.Unlock()
	fake.GetByGUIDStub = stub
}

func (fake *FakeJobsClient) GetByGUIDArgsForCall(i int) (context.Context, string, bool) {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	argsForCall := fake.getByGUIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeJobsClient) GetByGUIDReturns(result1 []v1.Job, result2 error) {
	fake.getByGUIDMutex.Lock()
	defer fake.getByGUIDMutex.Unlock()
	fake.GetByGUIDStub = nil
	fake.getByGUIDReturns = struct {
		result1 []v1.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobsClient) GetByGUIDReturnsOnCall(i int, result1 []v1.Job, result2 error) {
	fake.getByGUIDMutex.Lock()
	defer fake.getByGUIDMutex.Unlock()
	fake.GetByGUIDStub = nil
	if fake.getByGUIDReturnsOnCall == nil {
		fake.getByGUIDReturnsOnCall = make(map[int]struct {
			result1 []v1.Job
			result2 error
		})
	}
	fake.getByGUIDReturnsOnCall[i] = struct {
		result1 []v1.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobsClient) SetLabel(arg1 context.Context, arg2 *v1.Job, arg3 string, arg4 string) (*v1.Job, error) {
	fake.setLabelMutex.Lock()
	ret, specificReturn := fake.setLabelReturnsOnCall[len(fake.setLabelArgsForCall)]
	fake.setLabelArgsForCall = append(fake.setLabelArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.Job
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetLabelStub
	fakeReturns := fake.setLabelReturns
	fake.recordInvocation("SetLabel", []interface{}{arg1, arg2, arg3, arg4})
	fake.setLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJobsClient) SetLabelCallCount() int {
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	return len(fake.setLabelArgsForCall)
}

func (fake *FakeJobsClient) SetLabelCalls(stub func(context.Context, *v1.Job, string, string) (*v1.Job, error)) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = stub
}

func (fake *FakeJobsClient) SetLabelArgsForCall(i int) (context.Context, *v1.Job, string, string) {
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	argsForCall := fake.setLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeJobsClient) SetLabelReturns(result1 *v1.Job, result2 error) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = nil
	fake.setLabelReturns = struct {
		result1 *v1.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobsClient) SetLabelReturnsOnCall(i int, result1 *v1.Job, result2 error) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = nil
	if fake.setLabelReturnsOnCall == nil {
		fake.setLabelReturnsOnCall = make(map[int]struct {
			result1 *v1.Job
			result2 error
		})
	}
	fake.setLabelReturnsOnCall[i] = struct {
		result1 *v1.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ task.JobsClient = new(FakeJobsClient)
