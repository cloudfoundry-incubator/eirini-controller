// Code generated by counterfeiter. DO NOT EDIT.
package reconcilerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini-controller/k8s/reconciler"
	v1 "code.cloudfoundry.org/eirini-controller/pkg/apis/eirini/v1"
)

type FakeTasksCrClient struct {
	GetTaskStub        func(context.Context, string, string) (*v1.Task, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getTaskReturns struct {
		result1 *v1.Task
		result2 error
	}
	getTaskReturnsOnCall map[int]struct {
		result1 *v1.Task
		result2 error
	}
	UpdateTaskStatusStub        func(context.Context, *v1.Task, v1.TaskStatus) error
	updateTaskStatusMutex       sync.RWMutex
	updateTaskStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.Task
		arg3 v1.TaskStatus
	}
	updateTaskStatusReturns struct {
		result1 error
	}
	updateTaskStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTasksCrClient) GetTask(arg1 context.Context, arg2 string, arg3 string) (*v1.Task, error) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetTaskStub
	fakeReturns := fake.getTaskReturns
	fake.recordInvocation("GetTask", []interface{}{arg1, arg2, arg3})
	fake.getTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTasksCrClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeTasksCrClient) GetTaskCalls(stub func(context.Context, string, string) (*v1.Task, error)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeTasksCrClient) GetTaskArgsForCall(i int) (context.Context, string, string) {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	argsForCall := fake.getTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTasksCrClient) GetTaskReturns(result1 *v1.Task, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 *v1.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTasksCrClient) GetTaskReturnsOnCall(i int, result1 *v1.Task, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 *v1.Task
			result2 error
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 *v1.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTasksCrClient) UpdateTaskStatus(arg1 context.Context, arg2 *v1.Task, arg3 v1.TaskStatus) error {
	fake.updateTaskStatusMutex.Lock()
	ret, specificReturn := fake.updateTaskStatusReturnsOnCall[len(fake.updateTaskStatusArgsForCall)]
	fake.updateTaskStatusArgsForCall = append(fake.updateTaskStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.Task
		arg3 v1.TaskStatus
	}{arg1, arg2, arg3})
	stub := fake.UpdateTaskStatusStub
	fakeReturns := fake.updateTaskStatusReturns
	fake.recordInvocation("UpdateTaskStatus", []interface{}{arg1, arg2, arg3})
	fake.updateTaskStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTasksCrClient) UpdateTaskStatusCallCount() int {
	fake.updateTaskStatusMutex.RLock()
	defer fake.updateTaskStatusMutex.RUnlock()
	return len(fake.updateTaskStatusArgsForCall)
}

func (fake *FakeTasksCrClient) UpdateTaskStatusCalls(stub func(context.Context, *v1.Task, v1.TaskStatus) error) {
	fake.updateTaskStatusMutex.Lock()
	defer fake.updateTaskStatusMutex.Unlock()
	fake.UpdateTaskStatusStub = stub
}

func (fake *FakeTasksCrClient) UpdateTaskStatusArgsForCall(i int) (context.Context, *v1.Task, v1.TaskStatus) {
	fake.updateTaskStatusMutex.RLock()
	defer fake.updateTaskStatusMutex.RUnlock()
	argsForCall := fake.updateTaskStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTasksCrClient) UpdateTaskStatusReturns(result1 error) {
	fake.updateTaskStatusMutex.Lock()
	defer fake.updateTaskStatusMutex.Unlock()
	fake.UpdateTaskStatusStub = nil
	fake.updateTaskStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTasksCrClient) UpdateTaskStatusReturnsOnCall(i int, result1 error) {
	fake.updateTaskStatusMutex.Lock()
	defer fake.updateTaskStatusMutex.Unlock()
	fake.UpdateTaskStatusStub = nil
	if fake.updateTaskStatusReturnsOnCall == nil {
		fake.updateTaskStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateTaskStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTasksCrClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.updateTaskStatusMutex.RLock()
	defer fake.updateTaskStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTasksCrClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.TasksCrClient = new(FakeTasksCrClient)
