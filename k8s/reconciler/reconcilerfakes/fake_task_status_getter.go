// Code generated by counterfeiter. DO NOT EDIT.
package reconcilerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini-controller/k8s/reconciler"
	v1 "code.cloudfoundry.org/eirini-controller/pkg/apis/eirini/v1"
	v1a "k8s.io/api/batch/v1"
)

type FakeTaskStatusGetter struct {
	GetStatusStub        func(context.Context, *v1a.Job) v1.TaskStatus
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1a.Job
	}
	getStatusReturns struct {
		result1 v1.TaskStatus
	}
	getStatusReturnsOnCall map[int]struct {
		result1 v1.TaskStatus
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskStatusGetter) GetStatus(arg1 context.Context, arg2 *v1a.Job) v1.TaskStatus {
	fake.getStatusMutex.Lock()
	ret, specificReturn := fake.getStatusReturnsOnCall[len(fake.getStatusArgsForCall)]
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1a.Job
	}{arg1, arg2})
	stub := fake.GetStatusStub
	fakeReturns := fake.getStatusReturns
	fake.recordInvocation("GetStatus", []interface{}{arg1, arg2})
	fake.getStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskStatusGetter) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *FakeTaskStatusGetter) GetStatusCalls(stub func(context.Context, *v1a.Job) v1.TaskStatus) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = stub
}

func (fake *FakeTaskStatusGetter) GetStatusArgsForCall(i int) (context.Context, *v1a.Job) {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	argsForCall := fake.getStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskStatusGetter) GetStatusReturns(result1 v1.TaskStatus) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	fake.getStatusReturns = struct {
		result1 v1.TaskStatus
	}{result1}
}

func (fake *FakeTaskStatusGetter) GetStatusReturnsOnCall(i int, result1 v1.TaskStatus) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	if fake.getStatusReturnsOnCall == nil {
		fake.getStatusReturnsOnCall = make(map[int]struct {
			result1 v1.TaskStatus
		})
	}
	fake.getStatusReturnsOnCall[i] = struct {
		result1 v1.TaskStatus
	}{result1}
}

func (fake *FakeTaskStatusGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskStatusGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.TaskStatusGetter = new(FakeTaskStatusGetter)
