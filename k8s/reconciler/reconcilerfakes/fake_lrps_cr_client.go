// Code generated by counterfeiter. DO NOT EDIT.
package reconcilerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini/k8s/reconciler"
	v1 "code.cloudfoundry.org/eirini/pkg/apis/eirini/v1"
)

type FakeLRPsCrClient struct {
	GetLRPStub        func(context.Context, string, string) (*v1.LRP, error)
	getLRPMutex       sync.RWMutex
	getLRPArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getLRPReturns struct {
		result1 *v1.LRP
		result2 error
	}
	getLRPReturnsOnCall map[int]struct {
		result1 *v1.LRP
		result2 error
	}
	UpdateLRPStatusStub        func(context.Context, *v1.LRP, v1.LRPStatus) error
	updateLRPStatusMutex       sync.RWMutex
	updateLRPStatusArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.LRP
		arg3 v1.LRPStatus
	}
	updateLRPStatusReturns struct {
		result1 error
	}
	updateLRPStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLRPsCrClient) GetLRP(arg1 context.Context, arg2 string, arg3 string) (*v1.LRP, error) {
	fake.getLRPMutex.Lock()
	ret, specificReturn := fake.getLRPReturnsOnCall[len(fake.getLRPArgsForCall)]
	fake.getLRPArgsForCall = append(fake.getLRPArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetLRPStub
	fakeReturns := fake.getLRPReturns
	fake.recordInvocation("GetLRP", []interface{}{arg1, arg2, arg3})
	fake.getLRPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLRPsCrClient) GetLRPCallCount() int {
	fake.getLRPMutex.RLock()
	defer fake.getLRPMutex.RUnlock()
	return len(fake.getLRPArgsForCall)
}

func (fake *FakeLRPsCrClient) GetLRPCalls(stub func(context.Context, string, string) (*v1.LRP, error)) {
	fake.getLRPMutex.Lock()
	defer fake.getLRPMutex.Unlock()
	fake.GetLRPStub = stub
}

func (fake *FakeLRPsCrClient) GetLRPArgsForCall(i int) (context.Context, string, string) {
	fake.getLRPMutex.RLock()
	defer fake.getLRPMutex.RUnlock()
	argsForCall := fake.getLRPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLRPsCrClient) GetLRPReturns(result1 *v1.LRP, result2 error) {
	fake.getLRPMutex.Lock()
	defer fake.getLRPMutex.Unlock()
	fake.GetLRPStub = nil
	fake.getLRPReturns = struct {
		result1 *v1.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeLRPsCrClient) GetLRPReturnsOnCall(i int, result1 *v1.LRP, result2 error) {
	fake.getLRPMutex.Lock()
	defer fake.getLRPMutex.Unlock()
	fake.GetLRPStub = nil
	if fake.getLRPReturnsOnCall == nil {
		fake.getLRPReturnsOnCall = make(map[int]struct {
			result1 *v1.LRP
			result2 error
		})
	}
	fake.getLRPReturnsOnCall[i] = struct {
		result1 *v1.LRP
		result2 error
	}{result1, result2}
}

func (fake *FakeLRPsCrClient) UpdateLRPStatus(arg1 context.Context, arg2 *v1.LRP, arg3 v1.LRPStatus) error {
	fake.updateLRPStatusMutex.Lock()
	ret, specificReturn := fake.updateLRPStatusReturnsOnCall[len(fake.updateLRPStatusArgsForCall)]
	fake.updateLRPStatusArgsForCall = append(fake.updateLRPStatusArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.LRP
		arg3 v1.LRPStatus
	}{arg1, arg2, arg3})
	stub := fake.UpdateLRPStatusStub
	fakeReturns := fake.updateLRPStatusReturns
	fake.recordInvocation("UpdateLRPStatus", []interface{}{arg1, arg2, arg3})
	fake.updateLRPStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLRPsCrClient) UpdateLRPStatusCallCount() int {
	fake.updateLRPStatusMutex.RLock()
	defer fake.updateLRPStatusMutex.RUnlock()
	return len(fake.updateLRPStatusArgsForCall)
}

func (fake *FakeLRPsCrClient) UpdateLRPStatusCalls(stub func(context.Context, *v1.LRP, v1.LRPStatus) error) {
	fake.updateLRPStatusMutex.Lock()
	defer fake.updateLRPStatusMutex.Unlock()
	fake.UpdateLRPStatusStub = stub
}

func (fake *FakeLRPsCrClient) UpdateLRPStatusArgsForCall(i int) (context.Context, *v1.LRP, v1.LRPStatus) {
	fake.updateLRPStatusMutex.RLock()
	defer fake.updateLRPStatusMutex.RUnlock()
	argsForCall := fake.updateLRPStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLRPsCrClient) UpdateLRPStatusReturns(result1 error) {
	fake.updateLRPStatusMutex.Lock()
	defer fake.updateLRPStatusMutex.Unlock()
	fake.UpdateLRPStatusStub = nil
	fake.updateLRPStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPsCrClient) UpdateLRPStatusReturnsOnCall(i int, result1 error) {
	fake.updateLRPStatusMutex.Lock()
	defer fake.updateLRPStatusMutex.Unlock()
	fake.UpdateLRPStatusStub = nil
	if fake.updateLRPStatusReturnsOnCall == nil {
		fake.updateLRPStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateLRPStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPsCrClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLRPMutex.RLock()
	defer fake.getLRPMutex.RUnlock()
	fake.updateLRPStatusMutex.RLock()
	defer fake.updateLRPStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLRPsCrClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.LRPsCrClient = new(FakeLRPsCrClient)
